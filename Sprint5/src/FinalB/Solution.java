//---–ù–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–æ–Ω—Ç–µ—Å—Ç - 52253724

package FinalB;             // -- —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –Ø–Ω–¥–µ–∫—Å.–ö–æ–Ω—Ç–µ—Å—Ç

import FinalB.Utils.Node;   // -- —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –Ø–Ω–¥–µ–∫—Å.–ö–æ–Ω—Ç–µ—Å—Ç

/*
 *  - –û–ü–ò–°–ê–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–ê -
 * –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ, –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —à–∞–≥–æ–≤:
 *
 *  0) –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞ —É–∑–ª–∞–º–∏. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –≤—Ö–æ–¥ –ø—É—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ, —Ç–æ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 *  –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è null (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ).
 *
 *  1) –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ <searchNode(...)>. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–∞–ª—å–Ω–µ–π—à–µ–µ
 *  –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä–µ–Ω—å –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
 *  —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞:
 *      –∞) —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —É–∑–µ–ª;
 *      –±) —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞;
 *      –≤) —Ç–∏–ø –ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è;
 *      –≥) –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ —É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞;
 *
 *  –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(Log(H)), –≥–¥–µ H - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞.
 *  –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(1)
 *
 *  2) –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–º–∫–æ–≤ —É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ –≤–µ—Ç–≤–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
 *      –∞) –Ω–∞–π–¥–µ–Ω–Ω—ã–π (—É–¥–∞–ª—è–µ–º—ã–π) —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è –ª–∏—Å—Ç–æ–≤—ã–º.
 *         –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ–Ω –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π <replaceNode(root, nodeToDelete, null)>.
 *
 *        –ò–¢–û–ì–û –ü–û –®–ê–ì–£ 2-–∞):
 *              –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(1)
 *              –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(1)
 *
 *      –±) –Ω–∞–π–¥–µ–Ω–Ω—ã–π (—É–¥–∞–ª—è–µ–º—ã–π) —É–∑–µ–ª –∏–º–µ–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞.
 *          –±1) —Ñ—É–Ω–∫—Ü–∏–µ–π <searchForPossibleReplacement(... )> –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∏–µ–º–Ω–∏–∫ —É–∑–ª–∞ - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–º–æ–∫.
 *              –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - O(1), –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - O(1).
 *
 *          –±2) —É–∑–µ–ª –∑–∞–º–µ–Ω—è–µ—Ç—Å—è —Å–≤–æ–∏–º –ø–æ—Ç–æ–º–∫–æ–º (—Å—Å—ã–ª–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞ –Ω–∞ —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –∑–∞–º—ã–∫–∞–µ—Ç—Å—è –Ω–∞
 *              –ø–æ—Ç–æ–º–∫–∞ —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞): <replaceNode(root, nodeToDelete, replacementNode)>
 *              –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - O(1), –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - O(1).
 *
 *         –ò–¢–û–ì–û –ü–û –®–ê–ì–£ 2-–±):
 *              –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(1) + O(1) = O(1)
 *              –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ):  O(1) + O(1) = O(1)
 *
 *      –≤) –Ω–∞–π–¥–µ–Ω–Ω—ã–π (—É–¥–∞–ª—è–µ–º—ã–π) —É–∑–µ–ª –∏–º–µ–µ—Ç 2-—Ö –ø–æ—Ç–æ–º–∫–æ–≤.
 *          –≤1) —Ñ—É–Ω–∫—Ü–∏–µ–π <searchForPossibleReplacement(... )> –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∏–µ–º–Ω–∏–∫ —É–∑–ª–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–æ–º
 *              –ø–æ–¥–¥–µ—Ä–µ–≤–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞.  –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ - O(Log(H-1)),
 *              –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - O(1).
 *
 *          –≤2) —Ñ—É–Ω–∫—Ü–∏–µ–π <replaceNode(root, nodeToDelete, replacementNode)> —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º.
 *              –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - O(1), –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ - O(1).
 *
 *          –≤3) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è —É–∑–ª–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–µ –≤–µ—Ä—Å–∏–∏
 *              –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
 *              –≤3-1) –ø—Ä–∏–µ–º–Ω–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –ø—Ä–∞–≤—ã–º –ø–æ—Ç–æ–º–∫–æ–º –∑–∞–º–µ–Ω—è–µ–º–æ–≥–æ —É–∑–ª–∞:
 *
 *                                      			[................50]
 *                                                  /
 *                                      [........30] 	‚Øá-- —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞
 *               —Ä–∞–∑—Ä—ã–≤–∞–µ–º–∞—è —Å–≤—è–∑—å --‚Øà ‚ï≥          ü°§
 *                                  [15]---‚îê    	[35] 	‚Øá-- –ø—Ä–∏–µ–º–Ω–∏–∫ (min –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ)
 *                                  /  \    ‚ï≤_______ü°•  \
 *                              [ 5]	[20]			[40]
 *
 *              –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ:
 *                  –≤3-1-1) —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º
 *                  –≤3-1-2) –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ª–µ–≤—ã–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º –∫ –ø—Ä–∏–º–Ω–∏–∫—É.
 *
 *              –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∏ —à–∞–≥–æ–≤ (–≤3-1-1)...(–≤3-1-2) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç O(1).
 *
 *              –≤3-2) –º–µ–∂–¥—É —É–¥–∞–ª—è–µ–º—ã–º —É–∑–ª–æ–º –∏ –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –≤ –¥–µ—Ä–µ–≤–µ.
 *
 *                                					[................50]
 *                                                  /
 *                                     [........25]	‚Øá-- —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞
 *                                     /     ü°°    \
 *               —Ä–∞–∑—Ä—ã–≤–∞–µ–º–∞—è —Å–≤—è–∑—å --‚Øà‚ï≥      |     [ 35    ]
 *                                    /		  \    /ü°§     \
 *                                   /         [30]   ‚ï≤     [40]
 *                                   __________ü°• ‚ØÖ \   ‚îú------–ø–æ–ª–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞
 *                                 ü°•             |   [32 ]      –ª–µ–≤—ã–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
 *                                /              |
 *  	                        [15]             ‚îî------------- –ø—Ä–∏–µ–º–Ω–∏–∫ (min –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ)
 *                              /  \
 *                          [ 5]	[20]
 *
 *              –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ:
 *                  –≤3-2-1) —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º
 *                  –≤3-2-2) –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –ø—Ä–∏–µ–º–Ω–∏–∫–∞ (–ª–µ–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é) –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫
 *                          —Ä–æ–¥–∏—Ç–µ–ª—é –ø—Ä–∏–µ–º–Ω–∏–∫–∞ –Ω–∞–ø—Ä—è–º—É—é.
 *                  –≤3-2-3) –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ª–µ–≤—ã–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º –∫ –ø—Ä–∏–º–Ω–∏–∫—É.
 *                  –≤3-2-4) –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∞–≤—ã–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º –∫ –ø—Ä–∏–º–Ω–∏–∫—É.
 *
 *              –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∏ —à–∞–≥–æ–≤ (–≤3-2-1)...(–≤3-2-4) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç O(1).
 *
 *         –ò–¢–û–ì–û –ü–û –®–ê–ì–£ 2-–≤):
 *              –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(Log(H-1)) + O(1) + –ú–êX (O(1), O(1)) = O(Log(H))
 *              –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ):  O(1) + O(1) + –ú–êX (O(1), O(1)) = O(1)
 *
 *  –ò–¢–û–ì–û –ü–û –®–ê–ì–£ 2):
 *      –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): –ú–ê–• (O(1), O(1), O(Log(H)) = O(Log(H)), –≥–¥–µ H - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞.
 *      –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): –ú–ê–• (O(1), O(1), O(1)) = O(1)
 *
 *  3) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä–µ–Ω—å –Ω–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π <replaceNode(...)>):
 *      –∞) –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –Ω–µ –±—ã–ª –∫–æ—Ä–Ω–µ–º –¥–µ—Ä–µ–≤–∞, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
 *      –≤) –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª –±—ã–ª –∫–æ—Ä–Ω–µ–º –¥–µ—Ä–µ–≤–∞, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞.
 *
 *  –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(1)
 *  –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(1)
 *
 *  -–ò–¢–û–ì–û–í–´–ô –†–ê–°–ß–ï–¢ –°–õ–û–ñ–ù–û–°–¢–ò –ê–õ–ì–û–†–ò–¢–ú–ê-
 *  –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(Log(H)) + O(Log(H)) + O(1) = O(Log(H)), –≥–¥–µ H - –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞.
 *  –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ (–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ): O(1) + O(1) + O(1) = O(1)
 *
 */


/**
 * –¢–∏–ø—ã –ø–æ–∑–∏—Ü–∏–π —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è.
 */
enum Position {
    LEFT,  // —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è –ª–µ–≤—ã–º –ø–æ—Ç–æ–º–∫–æ–º —Ä–æ–¥–∏—Ç–µ–ª—è
    RIGHT, // —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤—ã–º –ø–æ—Ç–æ–º–∫–æ–º —Ä–æ–¥–∏—Ç–µ–ª—è
    ROOT,  // —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª —è–≤–ª—è–µ—Ç –∫–æ–Ω–µ–º –¥–µ—Ä–µ–≤–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º)
    NULL   // —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –∑–∞–¥–∞–Ω (–ø—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞)
}

/**
 * –ö–ª–∞—Å—Å –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ) –æ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤.
 */
class NodeInfo {
    private final Node parent;
    private final Node node;
    private final Position position;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ NodeInfo.
     *
     * @param parent   –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª.
     * @param node     –°—Å—ã–ª–∫–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª (–∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ NodeInfo).
     * @param position –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è.
     */
    NodeInfo(Node parent, Node node, Position position) {
        this.node = node;
        this.parent = parent;
        this.position = position;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª.
     *
     * @return –°—Å—ã–ª–∫–∞ —É–∑–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ NodeInfo.
     */
    public Node getNode() {
        return node;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞.
     *
     * @return –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è —É–∑–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ NodeInfo.
     */
    public Node getParent() {
        return parent;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è.
     *
     * @return –ö–æ–¥ –ø–æ–∑–∏—Ü–∏–∏.
     */
    public Position getPosition() {
        return position;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ —É —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞.
     *
     * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤.
     */
    public int getNumberOfSuccessors() {
        int res = 0;
        if (node == null) return res;
        if (node.getLeft() != null) res++;
        if (node.getRight() != null) res++;
        return res;
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.
     *
     * @param node –°—Å—ã–ª–∫–∞ –Ω–∞ —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞.
     * @return –°—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç —É–∑–ª–∞.
     */
    private String nodeToStr(Node node) {
        if (node == null) return "Node(null)";
        Node leftChild = node.getLeft();
        Node rightChild = node.getRight();
        String leftStr = leftChild == null ? "null" : String.valueOf(leftChild.getValue());
        String rightStr = rightChild == null ? "null" : String.valueOf(rightChild.getValue());
        return String.format("Node(V=%s, L=%s, R=%s)", node.getValue(), leftStr, rightStr);
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ NodeInfo) –≤ —Å—Ç—Ä–æ–∫—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.
     *
     * @return –°—Ç—Ä–æ–∫–∞ —Å–≤–æ–π—Å—Ç–≤ —É–∑–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ NodeInfo.
     */
    @Override
    public String toString() {
        return String.format("NodeInfo{node = %s, parent=%s, relation to parent=%s, successors = %d}",
                nodeToStr(node),
                nodeToStr(parent),
                position,
                this.getNumberOfSuccessors());
    }
}

/**
 * - –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –†–ï–®–ï–ù–ò–Ø -
 */
public class Solution {
    /**
     * –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–º–µ–Ω—ã –¥–ª—è —É–∑–ª–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –¥–µ—Ä–µ–≤–µ.
     *
     * @param nodeInfo –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–º–µ–Ω—è–µ–º–æ–º —É–∑–ª–µ.
     * @return –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø—Ä–∏–µ–º–Ω–∏–∫–µ.
     */
    private static NodeInfo searchForPossibleReplacement(NodeInfo nodeInfo) {
        if (nodeInfo == null) // –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–∑–ª–∞ - –∑–∞–º–µ–Ω—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
            return new NodeInfo(null, null, Position.NULL);

        // –µ—Å–ª–∏ —É —É–∑–ª–∞ –Ω–µ—Ç –ø–æ—Ç–æ–º–∫–æ–≤, - –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç –∏ –ø—Ä–∏–µ–º–Ω–∏–∫–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ–º NULL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        Node resNode = null;
        Node resParent = null;
        Position position = Position.NULL;

        // –µ—Å–ª–∏ —É —É–∑–ª–∞ 1 –ø–æ—Ç–æ–º–æ–∫, - —Ç–æ –æ–Ω –∏ –±—É–¥–µ—Ç –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º.
        if (nodeInfo.getNumberOfSuccessors() == 1) {
            if (nodeInfo.getNode().getLeft() == null) {
                resNode = nodeInfo.getNode().getRight();
                resParent = nodeInfo.getNode();
                position = Position.RIGHT;
            } else {
                resNode = nodeInfo.getNode().getLeft();
                resParent = nodeInfo.getNode();
                position = Position.LEFT;
            }
        }
        if (nodeInfo.getNumberOfSuccessors() == 2) {
            // –µ—Å–ª–∏ —É —É–∑–ª–∞ 2 –ø–æ—Ç–æ–º–∫–∞ - —Ç–æ –∏—â–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ. –û–Ω –∏ –±—É–¥–µ—Ç –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º.
            resNode = nodeInfo.getNode().getRight();
            resParent = nodeInfo.getNode();
            position = Position.RIGHT;
            while (resNode.getLeft() != null) {
                resParent = resNode;
                resNode = resNode.getLeft();
                position = Position.LEFT;
            }
        }
        return new NodeInfo(resParent, resNode, position);
    }

    /**
     * –ü–æ–∏—Å–∫ —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.
     *
     * @param root –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞.
     * @param key  –ó–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏.
     * @return –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞.
     */
    private static NodeInfo searchNode(Node root, int key) {
        Node parent = root;
        Node current = root;
        Position position = Position.ROOT;

        // –í–æ–∑—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –≤ –¥–µ—Ä–µ–≤–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
        NodeInfo nullObj = new NodeInfo(null, null, Position.NULL);

        while (true) {
            if (current.getValue() == key)
                return new NodeInfo(parent, current, position); // —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—à–µ–ª—Å—è.

            if ((current.getLeft() == null) && (current.getRight() == null)) // –¥–æ—à–ª–∏ –¥–æ –ª–∏—Å—Ç–∞, –Ω–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞—à–ª–∏
                return nullObj;

            parent = current;
            if (key < parent.getValue()) {
                if (parent.getLeft() == null)
                    return nullObj; // –≤ –¥–µ—Ä–µ–≤–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
                else {
                    current = parent.getLeft();
                    position = Position.LEFT;
                }
            } else {
                if (parent.getRight() == null)
                    return nullObj; // –≤ –¥–µ—Ä–µ–≤–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
                else {
                    current = parent.getRight();
                    position = Position.RIGHT;
                }
            }
        }
    }

    /**
     * –ó–∞–º–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –¥—Ä—É–≥–∏–º.
     *
     * @param root          –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞.
     * @param nodeToReplace –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞.
     * @param newNode       –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞, –∫–æ—Ç–æ—Ä—ã–º –∑–∞–º–µ—â–∞–µ—Ç—Å—è —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª.
     * @return –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–º–µ–Ω—ã —É–∑–ª–æ–≤.
     */
    private static Node replaceNode(Node root, NodeInfo nodeToReplace, NodeInfo newNode) {
        if (nodeToReplace.getPosition() == Position.ROOT) {
            return newNode.getNode();
        }

        if (nodeToReplace.getPosition() == Position.LEFT)
            nodeToReplace.getParent().setLeft(newNode.getNode());
        else
            nodeToReplace.getParent().setRight(newNode.getNode());

        return root;
    }

    /**
     * –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.
     *
     * @param root –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞.
     * @param key  –ó–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏.
     * @return –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏ —Ç—Ä–∞—Å—Å—ã –æ–ø–µ—Ä–∞—Ü–∏–∏.
     */
    public static String getTraceOfOperation(Node root, int key) {
        NodeInfo searchedNode = searchNode(root, key);
        NodeInfo replacementNode = searchForPossibleReplacement(searchedNode);

        return String.format(
                "Tracing key [%d]:\n\t-node found: %s,\n\t\t-possible replacement:\n\t\t\t-%s\n",
                key,
                searchedNode.toString(),
                replacementNode.toString()
        );
    }

    /**
     * -–û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –£–ó–õ–ê –î–ï–†–ï–í–ê-
     *
     * @param root –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞.
     * @param key  –ó–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏.
     * @return –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.
     */
    public static Node remove(Node root, int key) {
        if (root == null) return null; // –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–µ—Ä–µ–≤—å—è.

        Node res = null;
        NodeInfo nodeToDelete = searchNode(root, key);
        if (nodeToDelete.getNode() == null) return root; //—É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ. –¥–µ—Ä–µ–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
        switch (nodeToDelete.getNumberOfSuccessors()) {
            case 0: {
                res = replaceNode(root, nodeToDelete, new NodeInfo(null, null, Position.NULL));
                break;
            }
            case 1: {
                NodeInfo replacementNode = searchForPossibleReplacement(nodeToDelete);
                res = replaceNode(root, nodeToDelete, replacementNode);
                break;
            }
            case 2: {
                NodeInfo replacementNode = searchForPossibleReplacement(nodeToDelete);

                Node rightChildOfDeletingNode = nodeToDelete.getNode().getRight();
                Node leftChildOfDeletingNode = nodeToDelete.getNode().getLeft();
                Node rightChildOfNewNode = replacementNode.getNode().getRight();

                Node possiblyNewRoot = replaceNode(root, nodeToDelete, replacementNode);

                // –µ—Å–ª–∏ newNode —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –ø—Ä–∞–≤—ã–º –ø–æ—Ç–æ–º–∫–æ–º nodeToDelete.
                if (rightChildOfDeletingNode == replacementNode.getNode()) {
                    replacementNode.getNode().setLeft(leftChildOfDeletingNode);
                } else {
                    // –µ—Å–ª–∏ –º–µ–∂–¥—É newNode –∏ nodeToDelete —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å.
                    replacementNode.getParent().setLeft(rightChildOfNewNode);
                    replacementNode.getNode().setLeft(leftChildOfDeletingNode);
                    replacementNode.getNode().setRight(rightChildOfDeletingNode);
                }

                res = possiblyNewRoot;
                break;
            }
        }

        return res;
    }
}

